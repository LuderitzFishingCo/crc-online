// <auto-generated />
using System;
using CRC_WebAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CRC_WebAPI.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20210923102713_AddIdentity")]
    partial class AddIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CRC_WebAPI.Models.Announcement", b =>
                {
                    b.Property<int>("Announcement_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Announcement_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Announcement_Date_Time")
                        .HasColumnType("datetime2")
                        .HasMaxLength(15);

                    b.Property<string>("Announcement_Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<int>("Course_Instance_ID")
                        .HasColumnType("int");

                    b.HasKey("Announcement_ID");

                    b.HasIndex("Announcement_ID")
                        .HasName("Announcement_ID");

                    b.ToTable("Announcement");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.CRC_Church", b =>
                {
                    b.Property<int>("Church_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Church_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Congregation_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Church_ID");

                    b.HasIndex("Congregation_Name")
                        .HasName("Congregation_Name");

                    b.ToTable("CRC_Church");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Chat", b =>
                {
                    b.Property<int>("Chat_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Chat_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Chat_ID");

                    b.HasIndex("Chat_ID")
                        .HasName("Chat_ID");

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Course", b =>
                {
                    b.Property<int>("Course_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Course_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Course_Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Course_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(210)")
                        .HasMaxLength(210);

                    b.Property<string>("Course_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("Course_Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<int?>("Course_Type_ID")
                        .HasColumnName("Course_Type_ID")
                        .HasColumnType("int");

                    b.HasKey("Course_ID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Course_ID")
                        .HasName("Course_ID");

                    b.HasIndex("Course_Type_ID")
                        .HasName("Course_Type_ID");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Course_Instance", b =>
                {
                    b.Property<int>("Course_Instance_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Course_Instance_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Course_ID")
                        .HasColumnName("Course_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Course_Instance_End_Date")
                        .HasColumnType("datetime2")
                        .HasMaxLength(15);

                    b.Property<DateTime>("Course_Instance_Start_Date")
                        .HasColumnType("datetime2")
                        .HasMaxLength(20);

                    b.HasKey("Course_Instance_ID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Course_ID")
                        .HasName("Course_ID");

                    b.HasIndex("Course_Instance_ID")
                        .HasName("Course_Instance_ID");

                    b.ToTable("Course_Instance");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Course_Instance_Learner", b =>
                {
                    b.Property<int?>("Course_Instance_ID")
                        .HasColumnName("Course_Instance_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Learner_ID")
                        .HasColumnName("Learner_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Payment_Type_ID")
                        .HasColumnName("Payment_Type_ID")
                        .HasColumnType("int");

                    b.Property<int?>("LearnerUser_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Learner_ID1")
                        .HasColumnType("int");

                    b.Property<float>("Payment_Amount")
                        .HasColumnName("Payment_Amount")
                        .HasColumnType("real");

                    b.HasKey("Course_Instance_ID", "Learner_ID", "Payment_Type_ID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Course_Instance_ID")
                        .HasName("Course_Instance_ID");

                    b.HasIndex("Learner_ID")
                        .HasName("Learner_ID");

                    b.HasIndex("Payment_Type_ID")
                        .HasName("Payment_Type_ID");

                    b.HasIndex("Learner_ID1", "LearnerUser_ID");

                    b.ToTable("Course_Instance_Learner");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Course_Instance_Teacher", b =>
                {
                    b.Property<int?>("Course_Instance_ID")
                        .HasColumnName("Course_Instance_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Teacher_ID")
                        .HasColumnName("Teacher_ID")
                        .HasColumnType("int");

                    b.HasKey("Course_Instance_ID", "Teacher_ID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Course_Instance_ID")
                        .HasName("Course_Instance_ID");

                    b.HasIndex("Teacher_ID")
                        .HasName("Teacher_ID");

                    b.ToTable("Course_Instance_Teacher");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Course_Price", b =>
                {
                    b.Property<int>("Course_Price_ID")
                        .HasColumnName("Course_Price_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Course_ID")
                        .HasColumnName("Course_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Course_Price_Date")
                        .HasColumnName("Course_Price_Date")
                        .HasColumnType("datetime2");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Course_Price_ID", "Course_ID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Course_ID")
                        .HasName("Course_ID");

                    b.HasIndex("Course_Price_ID")
                        .HasName("Course_Price_ID");

                    b.ToTable("Course_Price");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Course_Rating", b =>
                {
                    b.Property<int>("Course_Rating_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Course_Rating_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Course_Review")
                        .HasColumnName("Course_Review")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnName("Rating")
                        .HasColumnType("int");

                    b.HasKey("Course_Rating_ID");

                    b.HasIndex("Course_Rating_ID")
                        .HasName("Course_Rating_ID");

                    b.ToTable("Course_Rating");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Course_Type", b =>
                {
                    b.Property<int>("Course_Type_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Course_Type_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Course_Type_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Course_Type_ID");

                    b.HasIndex("Course_Type_ID")
                        .HasName("Course_Type_ID");

                    b.ToTable("Course_Type");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Date", b =>
                {
                    b.Property<int>("Date_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Date_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Event_Date")
                        .HasColumnName("Event_Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Date_ID");

                    b.HasIndex("Date_ID")
                        .HasName("Date_ID");

                    b.ToTable("Date");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Date_Time_Slot", b =>
                {
                    b.Property<int?>("Date_ID")
                        .HasColumnName("Date_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Time_Slot_ID")
                        .HasColumnName("Time_Slot_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Lesson_Instance_ID")
                        .HasColumnName("Lesson_Instance_ID")
                        .HasColumnType("int");

                    b.HasKey("Date_ID", "Time_Slot_ID", "Lesson_Instance_ID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Date_ID")
                        .HasName("Date_ID");

                    b.HasIndex("Lesson_Instance_ID")
                        .HasName("Lesson_Instance_ID");

                    b.HasIndex("Time_Slot_ID")
                        .HasName("Time_Slot_ID");

                    b.ToTable("Date_Time_Slot");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Department", b =>
                {
                    b.Property<int>("Department_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Department_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Department_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Department_ID");

                    b.HasIndex("Department_ID")
                        .HasName("Department_ID");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Gender", b =>
                {
                    b.Property<int>("Gender_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Gender_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Gender_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Gender_Id");

                    b.HasIndex("Gender_Name")
                        .HasName("Gender_Name");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Learner", b =>
                {
                    b.Property<int>("Learner_ID")
                        .HasColumnName("Learner_ID")
                        .HasColumnType("int");

                    b.Property<int?>("User_ID")
                        .HasColumnName("User_ID")
                        .HasColumnType("int");

                    b.HasKey("Learner_ID", "User_ID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Learner_ID")
                        .HasName("Learner_ID");

                    b.HasIndex("User_ID")
                        .HasName("User_ID");

                    b.ToTable("Learner");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Lesson", b =>
                {
                    b.Property<int>("Lesson_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Lesson_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Lesson_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(210)")
                        .HasMaxLength(210);

                    b.Property<string>("Lesson_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<int>("Lesson_Number")
                        .HasColumnType("int");

                    b.HasKey("Lesson_ID");

                    b.HasIndex("Lesson_ID")
                        .HasName("Lesson_ID");

                    b.ToTable("Lesson");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Lesson_Instance", b =>
                {
                    b.Property<int?>("Lesson_ID")
                        .HasColumnName("Lesson_ID")
                        .HasColumnType("int");

                    b.Property<int>("Lesson_Instance_ID")
                        .HasColumnName("Lesson_Instance_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Course_Instance_ID")
                        .HasColumnName("Course_Instance_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Lesson_Instance_Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Lesson_ID", "Lesson_Instance_ID", "Course_Instance_ID");

                    b.HasIndex("Course_Instance_ID")
                        .HasName("Course_Instance_ID");

                    b.HasIndex("Lesson_ID")
                        .HasName("Lesson_ID");

                    b.HasIndex("Lesson_Instance_ID")
                        .HasName("Lesson_Instance_ID");

                    b.ToTable("Lesson_Instance");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Lesson_Instance_Quiz", b =>
                {
                    b.Property<int?>("Quiz_ID")
                        .HasColumnName("Quiz_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Lesson_Instance_ID")
                        .HasColumnName("Lesson_Instance_ID")
                        .HasColumnType("int");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.HasKey("Quiz_ID", "Lesson_Instance_ID");

                    b.HasIndex("Lesson_Instance_ID")
                        .HasName("Lesson_Instance_ID");

                    b.HasIndex("Quiz_ID")
                        .HasName("Quiz_ID");

                    b.ToTable("Lesson_Instance_Quiz");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Lesson_Rating", b =>
                {
                    b.Property<int>("Lesson_Rating_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Lesson_Rating_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Lesson_Review")
                        .HasColumnName("Lesson_Review")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Lesson_Rating_ID");

                    b.HasIndex("Lesson_Rating_ID")
                        .HasName("Lesson_Rating_ID");

                    b.ToTable("Lesson_Rating");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Lesson_Slot", b =>
                {
                    b.Property<int>("Lesson_Slot_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Lesson_Slot_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Lesson_End")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Lesson_Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Lesson_Slot_ID");

                    b.HasIndex("Lesson_Slot_ID")
                        .HasName("Lesson_Slot_ID");

                    b.ToTable("Lesson_Slot");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Location", b =>
                {
                    b.Property<int>("Location_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Location_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.HasKey("Location_ID");

                    b.HasIndex("Location_ID")
                        .HasName("Location_ID");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Message", b =>
                {
                    b.Property<int>("Message_ID")
                        .HasColumnName("Message_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Learner_ID")
                        .HasColumnName("Learner_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Chat_ID")
                        .HasColumnName("Chat_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Teacher_ID")
                        .HasColumnName("Teacher_ID")
                        .HasColumnType("int");

                    b.Property<string>("Message_Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Sent_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Sent_Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Message_ID", "Learner_ID", "Chat_ID", "Teacher_ID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Chat_ID")
                        .HasName("Chat_ID");

                    b.HasIndex("Learner_ID")
                        .HasName("Learner_ID");

                    b.HasIndex("Message_ID")
                        .HasName("Message_ID");

                    b.HasIndex("Teacher_ID")
                        .HasName("Teacher_ID");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Password_History", b =>
                {
                    b.Property<int>("Password_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Password_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Current_Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(110)")
                        .HasMaxLength(110);

                    b.Property<string>("Previous_Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(110)")
                        .HasMaxLength(110);

                    b.HasKey("Password_ID");

                    b.HasIndex("Password_ID")
                        .HasName("Password_ID");

                    b.ToTable("Password_History");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Payment_Type", b =>
                {
                    b.Property<int>("Payment_Type_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Payment_Type_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Payment_Type_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Payment_Type_ID");

                    b.HasIndex("Payment_Type_ID")
                        .HasName("Payment_Type_ID");

                    b.ToTable("Payment_Type");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Question", b =>
                {
                    b.Property<int>("Question_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Question_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(110)")
                        .HasMaxLength(110);

                    b.Property<string>("Question_Asked")
                        .IsRequired()
                        .HasColumnType("nvarchar(110)")
                        .HasMaxLength(110);

                    b.Property<int?>("Question_Bank_ID")
                        .HasColumnName("Question_Bank_ID")
                        .HasColumnType("int");

                    b.HasKey("Question_ID");

                    b.HasIndex("Question_Bank_ID")
                        .HasName("Question_Bank_ID");

                    b.HasIndex("Question_ID")
                        .HasName("Question_ID");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Question_Bank", b =>
                {
                    b.Property<int>("Question_Bank_ID")
                        .HasColumnName("Question_Bank_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Question_Bank_Category_ID")
                        .HasColumnName("Question_Bank_Category_ID")
                        .HasColumnType("int");

                    b.Property<string>("Question_Bank_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(110)")
                        .HasMaxLength(110);

                    b.HasKey("Question_Bank_ID");

                    b.HasIndex("Question_Bank_Category_ID")
                        .HasName("Question_Bank_Category_ID");

                    b.HasIndex("Question_Bank_ID")
                        .HasName("Question_Bank_ID");

                    b.ToTable("Question_Bank");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Question_Bank_Category", b =>
                {
                    b.Property<int>("Question_Bank_Category_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Question_Bank_Category_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Question_Bank_Category_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(110)")
                        .HasMaxLength(110);

                    b.HasKey("Question_Bank_Category_ID");

                    b.HasIndex("Question_Bank_Category_ID")
                        .HasName("Question_Bank_Category_ID");

                    b.ToTable("Question_Bank_Category");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Quiz", b =>
                {
                    b.Property<int>("Quiz_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Quiz_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Due_Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Lesson_ID")
                        .HasColumnName("Lesson_ID")
                        .HasColumnType("int");

                    b.Property<string>("Quiz_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Quiz_ID");

                    b.HasIndex("Lesson_ID")
                        .HasName("Lesson_ID");

                    b.HasIndex("Quiz_ID")
                        .HasName("Quiz_ID");

                    b.ToTable("Quiz");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Quiz_Question", b =>
                {
                    b.Property<int?>("Quiz_ID")
                        .HasColumnName("Quiz_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Question_ID")
                        .HasColumnName("Question_ID")
                        .HasColumnType("int");

                    b.HasKey("Quiz_ID", "Question_ID");

                    b.HasIndex("Question_ID")
                        .HasName("Question_ID");

                    b.HasIndex("Quiz_ID")
                        .HasName("Quiz_ID");

                    b.ToTable("Quiz_Question");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Report", b =>
                {
                    b.Property<int>("Report_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Report_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Report_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Report_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(110)")
                        .HasMaxLength(110);

                    b.HasKey("Report_ID");

                    b.HasIndex("Report_ID")
                        .HasName("Report_ID");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Resource", b =>
                {
                    b.Property<int>("Resource_ID")
                        .HasColumnName("Resource_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Resource_Type_ID")
                        .HasColumnName("Resource_Type_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Lesson_ID")
                        .HasColumnType("int");

                    b.Property<string>("Resource_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(110)")
                        .HasMaxLength(110);

                    b.HasKey("Resource_ID", "Resource_Type_ID");

                    b.HasIndex("Resource_ID")
                        .HasName("Resource_ID");

                    b.HasIndex("Resource_Type_ID")
                        .HasName("Resource_Type_ID");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Resource_Type", b =>
                {
                    b.Property<int>("Resource_Type_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Resource_Type_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Resource_Type_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Resource_Type_ID");

                    b.HasIndex("Resource_Type_ID")
                        .HasName("Resource_Type_ID");

                    b.ToTable("Resource_Type");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Resource_Video", b =>
                {
                    b.Property<int>("Resource_ID")
                        .HasColumnName("Resource_ID")
                        .HasColumnType("int");

                    b.Property<int>("Resource_Video_ID")
                        .HasColumnName("Resource_Video_ID")
                        .HasColumnType("int");

                    b.Property<int>("Video_Duration")
                        .HasColumnType("int")
                        .HasMaxLength(110);

                    b.Property<int>("Video_Format")
                        .HasColumnType("int")
                        .HasMaxLength(110);

                    b.HasKey("Resource_ID", "Resource_Video_ID");

                    b.HasIndex("Resource_ID")
                        .HasName("Resource_ID");

                    b.HasIndex("Resource_Video_ID")
                        .HasName("Resource_Video_ID");

                    b.ToTable("Resource_Video");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Sermon", b =>
                {
                    b.Property<int>("Sermon_ID")
                        .HasColumnName("Sermon_ID")
                        .HasColumnType("int");

                    b.Property<int>("Sermon_Topic_ID")
                        .HasColumnName("Sermon_Topic_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Sermon_Date")
                        .HasColumnType("datetime2")
                        .HasMaxLength(110);

                    b.Property<string>("Sermon_Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(110)")
                        .HasMaxLength(110);

                    b.HasKey("Sermon_ID", "Sermon_Topic_ID");

                    b.HasIndex("Sermon_ID")
                        .HasName("Sermon_ID");

                    b.HasIndex("Sermon_Topic_ID")
                        .HasName("Sermon_Topic_ID");

                    b.ToTable("Sermon");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Sermon_Topic", b =>
                {
                    b.Property<int>("Sermon_Topic_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Sermon_Topic_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Sermon_Topic_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Sermon_Topic_ID");

                    b.HasIndex("Sermon_Topic_ID")
                        .HasName("Sermon_Topic_ID");

                    b.ToTable("Sermon_Topic");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Teacher", b =>
                {
                    b.Property<int>("Teacher_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Teacher_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Teaching_Level_ID")
                        .HasColumnName("Teaching_Level_ID")
                        .HasColumnType("int");

                    b.Property<int?>("UserChurch_ID")
                        .HasColumnType("int");

                    b.Property<int?>("UserDepartment_ID")
                        .HasColumnType("int");

                    b.Property<int?>("UserGender_ID")
                        .HasColumnType("int");

                    b.Property<int?>("UserLocation_ID")
                        .HasColumnType("int");

                    b.Property<int>("User_ID")
                        .HasColumnType("int");

                    b.Property<int?>("User_ID1")
                        .HasColumnType("int");

                    b.Property<int?>("User_Role_ID")
                        .HasColumnType("int");

                    b.HasKey("Teacher_ID");

                    b.HasIndex("Teacher_ID")
                        .HasName("Teacher_ID");

                    b.HasIndex("Teaching_Level_ID")
                        .HasName("Teaching_Level_ID");

                    b.HasIndex("User_ID1", "UserChurch_ID", "UserGender_ID", "UserDepartment_ID", "UserLocation_ID", "User_Role_ID");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Teacher_Application", b =>
                {
                    b.Property<int>("Teacher_Application_ID")
                        .HasColumnName("Teacher_Application_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Teacher_Application_Status_ID")
                        .HasColumnName("Teacher_Application_Status_ID")
                        .HasColumnType("int");

                    b.Property<int?>("User_ID")
                        .HasColumnName("User_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Application_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Application_Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserChurch_ID")
                        .HasColumnType("int");

                    b.Property<int?>("UserDepartment_ID")
                        .HasColumnType("int");

                    b.Property<int?>("UserGender_ID")
                        .HasColumnType("int");

                    b.Property<int?>("UserLocation_ID")
                        .HasColumnType("int");

                    b.Property<int?>("User_ID1")
                        .HasColumnType("int");

                    b.Property<int?>("User_Role_ID")
                        .HasColumnType("int");

                    b.HasKey("Teacher_Application_ID", "Teacher_Application_Status_ID", "User_ID")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Teacher_Application_ID")
                        .HasName("Teacher_Application_ID");

                    b.HasIndex("Teacher_Application_Status_ID")
                        .HasName("Teacher_Application_Status_ID");

                    b.HasIndex("User_ID")
                        .HasName("User_ID");

                    b.HasIndex("User_ID1", "UserChurch_ID", "UserGender_ID", "UserDepartment_ID", "UserLocation_ID", "User_Role_ID");

                    b.ToTable("Teacher_Application");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Teacher_Application_Status", b =>
                {
                    b.Property<int>("Teacher_Application_Status_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Teacher_Application_Status_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Teacher_Application_Status_ID");

                    b.HasIndex("Teacher_Application_Status_ID")
                        .HasName("Teacher_Application_Status_ID");

                    b.ToTable("Teacher_Application_Status");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Teaching_Level", b =>
                {
                    b.Property<int>("Teaching_Level_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Teaching_Level_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Teaching_Level_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Teaching_Level_ID");

                    b.HasIndex("Teaching_Level_ID")
                        .HasName("Teaching_Level_ID");

                    b.ToTable("Teaching_Level");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Time_Slot", b =>
                {
                    b.Property<int>("Time_Slot_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Time_Slot_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("End_Time")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Start_Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Time_Slot_ID");

                    b.HasIndex("Time_Slot_ID")
                        .HasName("Time_Slot_ID");

                    b.ToTable("Time_Slot");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.User", b =>
                {
                    b.Property<int>("User_ID")
                        .HasColumnName("User_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Church_ID")
                        .HasColumnName("Church_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Gender_ID")
                        .HasColumnName("Gender_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Department_ID")
                        .HasColumnName("Department_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Location_ID")
                        .HasColumnName("Location_ID")
                        .HasColumnType("int");

                    b.Property<int?>("User_Role_ID")
                        .HasColumnName("User_Role_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date_of_Birth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email_Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("First_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("User_ID", "Church_ID", "Gender_ID", "Department_ID", "Location_ID", "User_Role_ID")
                        .HasName("PK_User");

                    b.HasIndex("Church_ID")
                        .HasName("Church_ID");

                    b.HasIndex("Department_ID")
                        .HasName("Department_ID");

                    b.HasIndex("Gender_ID")
                        .HasName("Gender_ID");

                    b.HasIndex("Location_ID")
                        .HasName("Location_ID");

                    b.HasIndex("User_ID")
                        .IsUnique()
                        .HasName("User_ID");

                    b.HasIndex("User_Role_ID")
                        .HasName("User_Role_ID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.User_Role", b =>
                {
                    b.Property<int>("User_Role_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("User_Role_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Role_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("User_Role_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("User_Role_ID");

                    b.HasIndex("User_Role_ID")
                        .HasName("User_Role_ID");

                    b.ToTable("User_Role");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Course", b =>
                {
                    b.HasOne("CRC_WebAPI.Models.Course_Type", "Course_Type")
                        .WithMany("Course")
                        .HasForeignKey("Course_Type_ID")
                        .HasConstraintName("FK_Course_Course_Type");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Course_Instance", b =>
                {
                    b.HasOne("CRC_WebAPI.Models.Course", "Course")
                        .WithMany("Course_Instances")
                        .HasForeignKey("Course_ID")
                        .HasConstraintName("FK_Course_Course_Instance");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Course_Instance_Learner", b =>
                {
                    b.HasOne("CRC_WebAPI.Models.Learner", "Learner")
                        .WithMany("Course_Instance_Learners")
                        .HasForeignKey("Learner_ID1", "LearnerUser_ID");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Lesson_Instance", b =>
                {
                    b.HasOne("CRC_WebAPI.Models.Course_Instance", "Course_Instance")
                        .WithMany("Lesson_Instances")
                        .HasForeignKey("Course_Instance_ID")
                        .HasConstraintName("FK_Lesson_Instance_Course_Instance")
                        .IsRequired();

                    b.HasOne("CRC_WebAPI.Models.Lesson", "Lesson")
                        .WithMany("Lesson_Instances")
                        .HasForeignKey("Lesson_ID")
                        .HasConstraintName("FK_Lesson_Instance_Lesson")
                        .IsRequired();
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Question", b =>
                {
                    b.HasOne("CRC_WebAPI.Models.Question_Bank", "Question_Bank")
                        .WithMany("Questions")
                        .HasForeignKey("Question_Bank_ID")
                        .HasConstraintName("FK_Question_Question_Bank");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Question_Bank", b =>
                {
                    b.HasOne("CRC_WebAPI.Models.Question_Bank_Category", "Question_Bank_Category")
                        .WithMany("Question_Banks")
                        .HasForeignKey("Question_Bank_ID")
                        .HasConstraintName("FK_Question_Bank_Question_Bank_Category")
                        .IsRequired();
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Quiz", b =>
                {
                    b.HasOne("CRC_WebAPI.Models.Lesson", "Lesson")
                        .WithMany("Quizzes")
                        .HasForeignKey("Lesson_ID")
                        .HasConstraintName("FK_Quiz_Lesson");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Teacher", b =>
                {
                    b.HasOne("CRC_WebAPI.Models.Teaching_Level", "Teaching_Level")
                        .WithMany("Teacher")
                        .HasForeignKey("Teaching_Level_ID")
                        .HasConstraintName("FK_Teacher_Teaching_Level");

                    b.HasOne("CRC_WebAPI.Models.User", null)
                        .WithMany("Teachers")
                        .HasForeignKey("User_ID1", "UserChurch_ID", "UserGender_ID", "UserDepartment_ID", "UserLocation_ID", "User_Role_ID");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.Teacher_Application", b =>
                {
                    b.HasOne("CRC_WebAPI.Models.Teacher_Application_Status", "Teacher_Application_Status")
                        .WithMany("Teacher_Applications")
                        .HasForeignKey("Teacher_Application_Status_ID")
                        .HasConstraintName("FK_Course_Course_Type")
                        .IsRequired();

                    b.HasOne("CRC_WebAPI.Models.User", null)
                        .WithMany("Teacher_Applications")
                        .HasForeignKey("User_ID1", "UserChurch_ID", "UserGender_ID", "UserDepartment_ID", "UserLocation_ID", "User_Role_ID");
                });

            modelBuilder.Entity("CRC_WebAPI.Models.User", b =>
                {
                    b.HasOne("CRC_WebAPI.Models.CRC_Church", "Church")
                        .WithMany("Users")
                        .HasForeignKey("Church_ID")
                        .HasConstraintName("FK_User_CRC_Church")
                        .IsRequired();

                    b.HasOne("CRC_WebAPI.Models.Department", "Department")
                        .WithMany("User")
                        .HasForeignKey("Department_ID")
                        .HasConstraintName("FK_User_Department")
                        .IsRequired();

                    b.HasOne("CRC_WebAPI.Models.Gender", "Gender")
                        .WithMany("User")
                        .HasForeignKey("Gender_ID")
                        .HasConstraintName("FK_User_Gender")
                        .IsRequired();

                    b.HasOne("CRC_WebAPI.Models.Location", "Location")
                        .WithMany("User")
                        .HasForeignKey("Location_ID")
                        .HasConstraintName("FK_User_Location")
                        .IsRequired();

                    b.HasOne("CRC_WebAPI.Models.Teacher", "Teacher")
                        .WithOne("User")
                        .HasForeignKey("CRC_WebAPI.Models.User", "User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRC_WebAPI.Models.User_Role", "User_Role")
                        .WithMany("User")
                        .HasForeignKey("User_Role_ID")
                        .HasConstraintName("FK_User_User_Role")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
